Работа с pipe. Часть 1

Для работы с пайпом можно воспользоваться системными вызовами write90 для записы и read() для чтения анологично тому как это делалось для записи в файл и чтение из файла. Различие в том, что при чтении из фвйла информация не исчезает, а байт, прочитанный из пайпа удаляется.
Длдя создания пайпа изсп системный вызов pipe(), которому в качестве параметра должен быть передан массив из других целых чисел.
Элемент массива с индексом 0 используется как файловый дескриптор для чтения а элемент с индексом 1 используется для записи
Пример 
int fd[2];
pipe(fd);

Таблица файловых дискрипторов наследуется дочерним процессом от родительского поэтому процесс-ребенок может отправлять информацию через пайп любому из своих предков так же как и читатьь информацию отправленную ими в пайп.
Пайп существует до тез пор пока хотябы один из потоков не закрыт. Для этого нужно чтобы каждый родственный процесс завершил работу, или в процессе работы явно закрыл входной и выходной потоки.

Работа с pipe часть 2 
Двунаправленная связь между родственными процессами 
Для органицации двунаправленной связи легче всего использовать два канала связи -пайп1 и пайп2
Файловые дескрипторы разных пайпов будем хранить в fd1 fd2
Для родительского процесса закрываем входной поток пайп1(close(fd1[0]))) и выходной поток пайп2 (close(fd2[1])))
для дочернего процесса закрываем входные потоки пайп1 и пайп2 

Результат выполнения программы:

Читаем строку, отправленную ребенком ...
строка прочитанная дочерним процессом: Информация для дочернего процесса от родителя
ребенок завершил работу
Прочитанная строка: Информация для родительского процесса от ребенка
процесс родитель завершил работу 
